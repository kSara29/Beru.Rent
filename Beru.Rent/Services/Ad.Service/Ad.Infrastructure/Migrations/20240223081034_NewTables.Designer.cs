// <auto-generated />
using System;
using Ad.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Ad.Infrastructure.Migrations
{
    [DbContext(typeof(AdContext))]
    [Migration("20240223081034_NewTables")]
    partial class NewTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Ad.Domain.Models.AddressExtra", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Apartment")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<byte?>("Floor")
                        .HasColumnType("smallint");

                    b.Property<string>("House")
                        .HasColumnType("text");

                    b.Property<string>("Latitude")
                        .HasColumnType("text");

                    b.Property<string>("Longitude")
                        .HasColumnType("text");

                    b.Property<string>("PostIndex")
                        .HasColumnType("text");

                    b.Property<string>("Region")
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AddressExtras");
                });

            modelBuilder.Entity("Ad.Domain.Models.Advertisement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AddressExtraId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<int>("ContractType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ExtraConditions")
                        .HasColumnType("text");

                    b.Property<decimal?>("MinDeposit")
                        .HasColumnType("numeric");

                    b.Property<bool?>("NeededDeposit")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<Guid>("TimeUnitId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AddressExtraId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("TimeUnitId");

                    b.ToTable("Ads");
                });

            modelBuilder.Entity("Ad.Domain.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("62611750-9b02-494a-a58a-3305b7d94596"),
                            CreatedAt = new DateTime(2024, 2, 23, 11, 10, 33, 433, DateTimeKind.Local).AddTicks(8414),
                            Title = "Игрушки"
                        },
                        new
                        {
                            Id = new Guid("4920055f-7e05-4af7-afee-8407a203038d"),
                            CreatedAt = new DateTime(2024, 2, 23, 11, 10, 33, 433, DateTimeKind.Local).AddTicks(8481),
                            Title = "Авто"
                        },
                        new
                        {
                            Id = new Guid("4e3b5060-147b-409a-82ba-df32919f810c"),
                            CreatedAt = new DateTime(2024, 2, 23, 11, 10, 33, 433, DateTimeKind.Local).AddTicks(8483),
                            Title = "Инструменты"
                        },
                        new
                        {
                            Id = new Guid("a3500d50-3335-4780-89c3-f163bfa460d1"),
                            CreatedAt = new DateTime(2024, 2, 23, 11, 10, 33, 433, DateTimeKind.Local).AddTicks(8485),
                            Title = "Техника"
                        },
                        new
                        {
                            Id = new Guid("b19052d7-cdb1-4715-9617-13c4605c7a11"),
                            CreatedAt = new DateTime(2024, 2, 23, 11, 10, 33, 433, DateTimeKind.Local).AddTicks(8487),
                            Title = "Электроника"
                        },
                        new
                        {
                            Id = new Guid("3746a8d0-3276-4037-8f51-8ca024437f9f"),
                            CreatedAt = new DateTime(2024, 2, 23, 11, 10, 33, 433, DateTimeKind.Local).AddTicks(8489),
                            Title = "Фотоаппаратура"
                        },
                        new
                        {
                            Id = new Guid("7cc84187-cc32-4cf1-9cb1-35a089caed5b"),
                            CreatedAt = new DateTime(2024, 2, 23, 11, 10, 33, 433, DateTimeKind.Local).AddTicks(8491),
                            Title = "Одежда"
                        },
                        new
                        {
                            Id = new Guid("8bf8ce89-3d59-487a-87fd-1d534d20b217"),
                            CreatedAt = new DateTime(2024, 2, 23, 11, 10, 33, 433, DateTimeKind.Local).AddTicks(8493),
                            Title = "Недвижимость"
                        },
                        new
                        {
                            Id = new Guid("684b4a8c-f3af-476c-9810-82ecf2d22d03"),
                            CreatedAt = new DateTime(2024, 2, 23, 11, 10, 33, 433, DateTimeKind.Local).AddTicks(8495),
                            Title = "Земельный участок"
                        },
                        new
                        {
                            Id = new Guid("e6c9cd31-5e81-4609-af68-d083fa76da49"),
                            CreatedAt = new DateTime(2024, 2, 23, 11, 10, 33, 433, DateTimeKind.Local).AddTicks(8500),
                            Title = "Бьюти-товары"
                        });
                });

            modelBuilder.Entity("Ad.Domain.Models.FileModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AdId")
                        .HasColumnType("uuid");

                    b.Property<string>("BucketName")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("MinioFileName")
                        .HasColumnType("text");

                    b.Property<string>("OriginFileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AdId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("Ad.Domain.Models.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AdvertisementId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AdvertisementId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Ad.Domain.Models.Tariff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Tariffs");
                });

            modelBuilder.Entity("Ad.Domain.Models.TimeUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TimeUnits");

                    b.HasData(
                        new
                        {
                            Id = new Guid("52a09930-e3c0-4400-92d3-e28f8b176a4f"),
                            CreatedAt = new DateTime(2024, 2, 23, 11, 10, 33, 433, DateTimeKind.Local).AddTicks(8690),
                            Duration = new TimeSpan(0, 1, 0, 0, 0),
                            Title = "Час"
                        },
                        new
                        {
                            Id = new Guid("c5f3a77d-d49f-4de4-b4bf-ab6dad544b81"),
                            CreatedAt = new DateTime(2024, 2, 23, 11, 10, 33, 433, DateTimeKind.Local).AddTicks(8697),
                            Duration = new TimeSpan(1, 0, 0, 0, 0),
                            Title = "Сутки"
                        },
                        new
                        {
                            Id = new Guid("4effd2e6-fb66-45fa-bb10-5abbc3f7e421"),
                            CreatedAt = new DateTime(2024, 2, 23, 11, 10, 33, 433, DateTimeKind.Local).AddTicks(8704),
                            Duration = new TimeSpan(7, 0, 0, 0, 0),
                            Title = "Неделя"
                        },
                        new
                        {
                            Id = new Guid("15281c7e-645d-4cb5-a0b8-e26ff1ae7051"),
                            CreatedAt = new DateTime(2024, 2, 23, 11, 10, 33, 433, DateTimeKind.Local).AddTicks(8707),
                            Duration = new TimeSpan(30, 0, 0, 0, 0),
                            Title = "Месяц"
                        });
                });

            modelBuilder.Entity("Ad.Domain.Models.Advertisement", b =>
                {
                    b.HasOne("Ad.Domain.Models.AddressExtra", "AddressExtra")
                        .WithMany()
                        .HasForeignKey("AddressExtraId");

                    b.HasOne("Ad.Domain.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ad.Domain.Models.TimeUnit", "TimeUnit")
                        .WithMany()
                        .HasForeignKey("TimeUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AddressExtra");

                    b.Navigation("Category");

                    b.Navigation("TimeUnit");
                });

            modelBuilder.Entity("Ad.Domain.Models.FileModel", b =>
                {
                    b.HasOne("Ad.Domain.Models.Advertisement", "Ad")
                        .WithMany("Files")
                        .HasForeignKey("AdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ad");
                });

            modelBuilder.Entity("Ad.Domain.Models.Tag", b =>
                {
                    b.HasOne("Ad.Domain.Models.Advertisement", "Ad")
                        .WithMany()
                        .HasForeignKey("AdvertisementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ad");
                });

            modelBuilder.Entity("Ad.Domain.Models.Advertisement", b =>
                {
                    b.Navigation("Files");
                });
#pragma warning restore 612, 618
        }
    }
}
